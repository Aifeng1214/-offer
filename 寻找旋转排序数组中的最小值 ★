http://www.lintcode.com/zh-cn/problem/find-minimum-in-rotated-sorted-array/

//思路：二分搜索
1.给定好数组的下标start和end
2.如果num[start]<num[end]则表明数组是排好序的，直接输出num[start]，否则转3
3.取中间数mid=(start+end)/2并比较num[start]与num[mid]大小
  1)如果num[mid]<=num[end],则反转点在右半部分，end=mid;
  2)如果num[mid]>num[end],则反转点在左半部分,start=mid+1;
class Solution {
public:
    int findMin(vector<int> &num) {
        if(num.size()==0) return 0;
        if(num.size()==1) return num[0];
        int start=0, end=num.size()-1;
        while(start<end){
            if(num[start]<num[end])
                return num[start];
            int mid=(start+end)/2;
            if(num[end]>=num[mid])    //一定要是<=
                end=mid;
            else start=mid+1;
        }
        return num[start];
    }
};


class Solution {
	public:
		int findMin(vector<int>& nums) {
		int len = nums.size();
		return  find(nums, 0, len - 1);
	}

	int find(vector<int>& nums, int l, int r){
		if (l + 1 == r && nums[l] > nums[r]) return nums[r];
		if (nums[l] <= nums[r]) return nums[l];

		int mid = (l + r) >> 1;
		if (nums[mid] > nums[l]) return find(nums, mid, r);
		else return find(nums, l, mid);
	}
};
