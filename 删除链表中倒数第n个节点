http://www.lintcode.com/zh-cn/problem/remove-nth-node-from-end-of-list/

//思路：创建前置的节点，做到删除头结点的操作一致性
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: The head of linked list.
     */
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        ListNode new_head(0);
        ListNode *ptr=&new_head;
        new_head.next=head;
        int count=0;
        while(ptr->next){
            ptr=ptr->next;
            count++;
        }
        ptr=&new_head;
        int move=count-n;
        while(move--){
            ptr=ptr->next;
        }
        ptr->next=ptr->next->next;
        return new_head.next;
    }
};


//O(n)的算法：
1.快慢指针，建创建新的链表头，将快慢指针置于链表头；
2.快指针先移动n+1步，然后与慢指针同步移动
3.当快指针到达NULL时候，慢指针达到待删除结点的前一个结点，然后执行删除操作
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        ListNode nhead(0);
        nhead.next=head;
        ListNode *fast=&nhead, *slow=&nhead;
        for(int i=0;i<n+1;++i)
            fast=fast->next;
        while(fast){
            fast=fast->next;
            slow=slow->next;
        }
        slow->next=slow->next->next;
        return nhead.next;
    }
};
