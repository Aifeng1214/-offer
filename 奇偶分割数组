
http://www.lintcode.com/zh-cn/problem/partition-array-by-odd-and-even/

//思路：用2个指针，分别从头和尾遍历整个数组；
        头的指针找到第一个偶数，尾的指针找到第一个奇数，做交换
class Solution {
public:
    /**
     * @param nums: a vector of integers
     * @return: nothing
     */
    void partitionArray(vector<int> &nums) {
        if(nums.size()==0) return;
        std::vector<int>::iterator iter1=nums.begin(),iter2=nums.end()-1;
        while(iter1<iter2){
            while(*iter1%2==1)
                iter1++;
            while(*iter2%2==0)
                iter2--;
            if(iter1<iter2){    //此处要做判断！
                swap(*iter1,*iter2);
                iter1++;iter2--;
            }
        }
        return;
    }
};


/**************保证奇数和奇数，偶数和偶数之间的相对位置不变**************/
//第一个思路：类似冒泡算法，前偶后奇数就交换：
class Solution {
public:
    void reOrderArray(vector<int> &array) {
 
         
        for (int i = 0; i < array.size();i++)
        {
            for (int j = array.size() - 1; j>i;j--)
            {
                if (array[j] % 2 == 1 && array[j - 1]%2 == 0) //前偶后奇交换
                {
                    swap(array[j], array[j-1]);
                }
            }
        }
    }
};

//第二个思路：再创建一个数组：空间换时间
class Solution{
public:
    void reOrderArray(vector<int> &array) {
 
        vector<int> array_temp;
        vector<int>::iterator ib1, ie1;
        ib1 = array.begin();
 
 
        for (; ib1 != array.end();){            //遇见偶数，就保存到新数组，同时从原数组中删除
            if (*ib1 % 2 == 0) {
                array_temp.push_back(*ib1);
                ib1 = array.erase(ib1);
            }
            else{
                ib1++;
            }
 
        }
        vector<int>::iterator ib2, ie2;
        ib2 = array_temp.begin();
        ie2 = array_temp.end();
 
        for (; ib2 != ie2; ib2++)             //将新数组的数添加到老数组
        {
            array.push_back(*ib2);
        }
    }
};
