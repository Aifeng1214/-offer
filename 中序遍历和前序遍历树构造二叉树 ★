http://www.lintcode.com/zh-cn/problem/construct-binary-tree-from-preorder-and-inorder-traversal/

//思路：
1.取preorder的第一个作为根
2.找到inorder中值为根的，则inorder中左侧即为左子树，右侧的为右子数
        // tree        8 4 5 3 7 3
        // preorder    8 [4 3 3 7] [5]
        // inorder     [3 3 4 7] 8 [5]
class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // write your code here
        return build(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
    }
    
    TreeNode *build(vector<int> &preorder, int pleft, int pright, vector<int> &inorder, int ileft, int iright){
        if(pleft>pright) return NULL;
        TreeNode *root=new TreeNode(preorder[pleft]);
        int pos;
        for(int i=ileft;i<=iright;++i){
            if(inorder[i]==preorder[pleft]){
                pos=i-ileft;break;
            }
        }
        
        root->left=build(preorder, pleft+1, pleft+pos, inorder, ileft, ileft+pos-1);
        root->right=build(preorder, pleft+1+pos, pright, inorder, ileft+pos+1, iright);
        return root;
    }
};
