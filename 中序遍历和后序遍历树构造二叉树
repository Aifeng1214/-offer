http://www.lintcode.com/zh-cn/problem/construct-binary-tree-from-inorder-and-postorder-traversal/#

//思路：
1.思路基本同前序、中序构造二叉树
2.root的值是后序的最后一个数
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return build(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }
    
    TreeNode *build(vector<int> &inorder, int ileft, int iright, vector<int> &postorder, int pleft, int pright){
        if(ileft>iright) return NULL;
        
        TreeNode *root=new TreeNode(postorder[pright]);
        int pos;
        for(int i=ileft; i<=iright; ++i){
            if(inorder[i]==postorder[pright]){
                pos=i-ileft;break;
            }
        }
        
        root->left=build(inorder, ileft, ileft+pos-1, postorder, pleft, pleft+pos-1);
        root->right=build(inorder, ileft+pos+1, iright, postorder, pleft+pos, pright-1);
        return root;
    }
};
