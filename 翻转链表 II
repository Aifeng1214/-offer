http://www.lintcode.com/zh-cn/problem/reverse-linked-list-ii/

class Solution {
public:
    /**
     * @param head: The head of linked list.
     * @param m: The start position need to reverse.
     * @param n: The end position need to reverse.
     * @return: The new head of partial reversed linked list.
     */
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        if(head->next==NULL || head==NULL) return head;
        if(m==n) return head;
        ListNode *p=head,*q=head;
        ListNode *new_head=new ListNode(-1);
        ListNode *ptr=new_head;
        new_head->next=head;
        while(--m){
            p=p->next;
            ptr=ptr->next;
        }
        while(--n)
            q=q->next;
        ListNode *pre=NULL,*cur=p,*nex=p->next;
        while(cur!=q){
            pre=cur;
            cur=nex;
            nex=nex->next;
            cur->next=pre;
        }
        p->next=nex;
        ptr->next=q;
        return new_head->next;
    }
};
